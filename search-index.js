var searchIndex = JSON.parse('{\
"kernel_api":{"doc":"This crate provides public facing types and interfaces …","t":"CXCFFFFFNNNNOONNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNPGIPPFKFPGMNNNONNNNNNNNMNNNNNNNNNNNNNOONNNNNNNNNNNNNNKHMMMNFNNNNNNNNNNNNNKMMFIIFFIIIIIINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["memory","module_export","sync","AllocError","Frame","Page","PhysicalAddress","VirtualAddress","add","add","add","add","addr","addr","align_down","align_down","align_down_runtime","align_down_runtime","align_unchecked","align_unchecked","align_up","align_up","align_up_runtime","align_up_runtime","allocator","as_ptr","as_ptr","backward_checked","backward_checked","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_sub","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","end","end","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","forward_checked","forward_checked","from","from","from","from","from","heap","into","into","into","into","into","mapping","new","new","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","start","start","steps_between","steps_between","sub","sub","sub","sub","sub","sub","sub","sub","to_owned","to_owned","to_owned","to_owned","to_owned","to_page","to_virtual","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","virtual","zero","AlignError","AlignedAllocError","AllocError","AllocError","AllocError","AllocationMeta","BackingAllocator","Config","Uninit","ZeroAllocError","allocate_contiguous","allocate_contiguous_aligned","allocate_one","allocate_zeroed","allocation_range","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deallocate_contiguous","drain_into","eq","fmt","from","from","from","from","into","into","into","into","new","push","region","regions","try_allocate_contiguous_aligned","try_allocate_zeroed","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Heap","adjust_heap","allocate","deallocate","new","reallocate","Mapping","borrow","borrow_mut","drop","from","from_raw_parts","into","into_raw_parts","new","new_with","remap","try_from","try_into","type_id","VirtualAllocator","allocate_contiguous","allocate_contiguous_at","LazyLock","Mutex","MutexGuard","Once","OnceLock","RwLock","RwReadGuard","RwUpgradableReadGuard","RwWriteGuard","Spinlock","SpinlockGuard","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call_once","deref","force","from","from","from","get","get_mut","get_or_init","into","into","into","is_complete","new","new","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"kernel_api"],[3,"kernel_api::memory"],[124,"kernel_api::memory::allocator"],[177,"kernel_api::memory::heap"],[183,"kernel_api::memory::mapping"],[197,"kernel_api::memory::virtual"],[200,"kernel_api::sync"],[242,"core::option"],[243,"core::cmp"],[244,"core::fmt"],[245,"core::fmt"],[246,"core::any"],[247,"core::num::nonzero"],[248,"alloc::sync"],[249,"core::alloc::layout"],[250,"core::ptr::non_null"],[251,"core::ops::function"]],"d":["Provides primitives for interfacing with raw memory (such …","","Provides kernel synchronisation primitives","The error returned when an allocation was unsuccessful","A memory frame","A memory page","A physical memory address of alignment <code>ALIGN</code>","A virtual memory address of alignment <code>ALIGN</code>","","","","","","","Returns the <code>PhysicalAddress</code> less than or equal to <code>self</code> …","Returns the <code>VirtualAddress</code> less than or equal to <code>self</code> with …","Returns the <code>PhysicalAddress</code> less than or equal to <code>self</code> …","Returns the <code>VirtualAddress</code> less than or equal to <code>self</code> with …","Forces a <code>PhysicalAddress</code> to have a specific alignment","Forces a <code>VirtualAddress</code> to have a specific alignment","Returns the <code>PhysicalAddress</code> greater than or equal to <code>self</code> …","Returns the <code>VirtualAddress</code> greater than or equal to <code>self</code> …","Returns the <code>PhysicalAddress</code> greater than or equal to <code>self</code> …","Returns the <code>VirtualAddress</code> greater than or equal to <code>self</code> …","Provides physical memory allocation APIs","Converts a <code>Page</code> into a raw pointer pointing to the first …","Converts a <code>VirtualAddress</code> into a raw pointer","","","","","","","","","","","","","Attempts to subtract <code>rhs</code> number of pages, returning <code>None</code> …","","","","","","","","","","","","","","","Returns the address one after the end of the <code>Frame</code>","Returns the address one after the end of the <code>Page</code>","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Provides an interface to act as the kernel heap","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a <code>Frame</code> using <code>base</code> as the first address within it","Creates a <code>Page</code> using <code>base</code> as the first address within it","Creates a new <code>PhysicalAddress</code>, panicking if the alignment …","Creates a new <code>VirtualAddress</code>, panicking if the alignment …","","","","","Returns the first address within the <code>Frame</code>","Returns the first address within the <code>Page</code>","","","","","","","","","","","","","","","","Converts a <code>Frame</code> into a <code>Page</code> via the physical page map …","Converts a <code>PhysicalAddress</code> into a <code>VirtualAddress</code> via the …","","","","","","","","","","","","","","","","","Returns the zero frame","An allocation with different alignment was returned instead","The error returned when an allocation with a requested …","The error returned when an allocation was unsuccessful","No allocation could be satisfied","No allocation could be made","","An allocator that managed physical memory","Configuration for creating a new allocator","An allocation could be made, but the result is not zeroed","The error returned when an allocation requesting zeroed …","Allocates a contiguous range of physical memory","Allocate a continuous range of <code>count</code> frames, aligned to 2^…","Allocates a single <code>Frame</code>","Allocates a contiguous region of <code>frame_count</code> frames, …","The lowest and highest frames that can be allocated","","","","","","","","","Safety","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","The regions of memory that are valid to allocate from","Allocate a continuous range of <code>count</code> frames. If the …","Tries to allocate a contiguous region of <code>frame_count</code> …","","","","","","","","","","","","","A heap manager","Adjusts the available heap area, similar to <code>sbrk</code>","Allocates a new area of memory for <code>layout</code>","Deallocates the memory pointed to by <code>ptr</code>","Creates a new instance of the heap manager","Adjusts the size of the allocation pointed to by <code>ptr</code>","An owned region of memory","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Creates a new memory mapping of <code>len</code> pages, using the …","Creates a new memory mapping of <code>len</code> pages, using the …","Attempts to grow or shrink the memory mapping to <code>new_len</code> …","","","","","","","","A mutual exclusion primitive useful for protecting shared …","An RAII implementation of a “scoped lock” of a mutex. …","","","A reader-writer lock","RAII structure used to release the shared read access of a …","RAII structure used to release upgradable read access of a …","RAII structure used to release the exclusive write access …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,3,4,5,4,5,4,5,4,5,4,5,4,5,4,5,0,3,5,1,3,8,1,3,4,5,8,1,3,4,5,1,8,1,3,4,5,8,1,3,4,5,1,3,4,5,1,3,8,1,3,4,5,8,1,3,4,5,1,3,8,1,3,4,5,0,8,1,3,4,5,0,1,3,4,5,1,3,4,5,1,3,1,3,1,1,3,3,4,4,5,5,8,1,3,4,5,1,4,8,1,3,4,5,8,1,3,4,5,8,1,3,4,5,0,1,24,0,0,24,20,0,0,0,20,0,16,16,16,16,21,21,23,24,20,21,23,24,20,16,16,20,20,21,23,24,20,21,23,24,20,16,16,23,21,16,16,21,23,24,20,21,23,24,20,21,23,24,20,0,0,26,26,26,26,0,29,29,29,29,29,29,29,29,29,29,29,29,29,0,30,30,0,0,0,0,0,0,0,0,0,0,0,31,35,33,31,35,33,31,33,33,31,35,33,35,35,35,31,35,33,31,31,35,33,31,35,33,31,35,33,31,35,33],"f":[0,0,0,0,0,0,0,0,[[1,2],-1,[]],[[3,2],-1,[]],[[4,2],-1,[]],[[5,2],-1,[]],0,0,[4,4],[5,5],[[4,2],4],[[5,2],5],[4,4],[5,5],[4,4],[5,5],[[4,2],4],[[5,2],5],0,[3,6],[5,6],[[1,2],[[7,[1]]]],[[3,2],[[7,[3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,2],[[7,[1]]]],[8,8],[1,1],[3,3],[4,4],[5,5],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[1,1],10],[[3,3],10],[[4,4],10],[[5,5],10],[1,4],[3,5],[[8,8],11],[[1,1],11],[[3,3],11],[[4,4],11],[[5,5],11],[[8,12],13],[[1,12],13],[[3,12],13],[[4,12],13],[[5,12],13],[[1,2],[[7,[1]]]],[[3,2],[[7,[3]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[4,1],[5,3],[2,4],[2,5],[[1,1],[[7,[10]]]],[[3,3],[[7,[10]]]],[[4,4],[[7,[10]]]],[[5,5],[[7,[10]]]],[1,4],[3,5],[[1,1],[[7,[2]]]],[[3,3],[[7,[2]]]],[[1,2],-1,[]],[[1,1],-1,[]],[[3,3],-1,[]],[[3,2],-1,[]],[[4,4],-1,[]],[[4,2],-1,[]],[[5,5],-1,[]],[[5,2],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,3],[4,5],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],0,[[],1],0,0,0,0,0,0,0,0,0,0,[[16,2],[[14,[1,17]]]],[[16,18,19],[[14,[1,17]]]],[16,[[14,[1,17]]]],[[16,2],[[14,[1,17]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[16,1,18],9],[[16,16],9],[[20,20],11],[[20,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[21,[[22,[16]]]],[[16,23],9],0,0,[[16,18,19],[[14,[1,24]]]],[[16,2],[[14,[1,20]]]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],0,[25,[[9,[5,25]]]],[[26,27],[[14,[[28,[6]],8]]]],[[26,[28,[6]],27],9],[[],26],[[26,[28,[6]],27,2],[[14,[[28,[6]],8]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[29,9],[-1,-1,[]],[[3,2],29],[-1,-2,[],[]],[29,[[9,[3,2]]]],[2,[[14,[29,17]]]],[[2,-1],[[14,[29,17]]],16],[[29,2],[[14,[9,17]]]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,[[30,2],[[14,[3,8]]]],[[30,3,2],[[14,[3,8]]]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[31,-1],9,32],[[[33,[-1,-2]]],-3,[],[[32,[],[[34,[-1]]]]],[]],[[[33,[-1,-2]]],-1,[],[[32,[],[[34,[-1]]]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[35,[-1]]],[[7,[-1]]],[]],[[[35,[-1]]],[[7,[-1]]],[]],[[[35,[-1]],-2],-1,[],[[32,[],[[34,[-1]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[31,11],[[],31],[[],[[35,[-1]]],[]],[-2,[[33,[-1,-2]]],[],[[32,[],[[34,[-1]]]]]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]]],"c":[],"p":[[5,"Frame",3],[1,"usize"],[5,"Page",3],[5,"PhysicalAddress",3],[5,"VirtualAddress",3],[1,"u8"],[6,"Option",242],[5,"AllocError",3],[1,"tuple"],[6,"Ordering",243],[1,"bool"],[5,"Formatter",244],[8,"Result",244],[6,"Result",245],[5,"TypeId",246],[10,"BackingAllocator",124],[8,"AllocError",124],[5,"NonZeroUsize",247],[1,"u32"],[6,"ZeroAllocError",124],[5,"Config",124],[5,"Arc",248],[5,"AllocationMeta",124],[6,"AlignedAllocError",124],[1,"isize"],[10,"Heap",177],[5,"Layout",249],[5,"NonNull",250],[5,"Mapping",183],[10,"VirtualAllocator",197],[5,"Once",200],[10,"FnOnce",251],[5,"LazyLock",200],[17,"Output"],[5,"OnceLock",200]],"b":[[92,"impl-Sub%3Cusize%3E-for-Frame"],[93,"impl-Sub-for-Frame"],[94,"impl-Sub-for-Page"],[95,"impl-Sub%3Cusize%3E-for-Page"],[96,"impl-Sub%3CPhysicalAddress%3CA%3E%3E-for-PhysicalAddress%3CB%3E"],[97,"impl-Sub%3Cusize%3E-for-PhysicalAddress%3CALIGN%3E"],[98,"impl-Sub%3CVirtualAddress%3CA%3E%3E-for-VirtualAddress%3CB%3E"],[99,"impl-Sub%3Cusize%3E-for-VirtualAddress%3CALIGN%3E"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
